# pfr_bot/handlers/ocr_flow.py
import logging
import httpx
from telegram import Update
from telegram.ext import (
    ContextTypes, 
    ConversationHandler, 
    CallbackQueryHandler, 
    MessageHandler, 
    filters,
    CommandHandler
)
from telegram import InlineKeyboardMarkup, InlineKeyboardButton

from states import MainMenu, OcrFlow
from keyboards import ocr_document_type_keyboard, main_menu_keyboard
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
from api_client import api_client, ApiClientError, TaskTimeoutError
# –£–¥–∞–ª—è–µ–º –æ—à–∏–±–æ—á–Ω—ã–π –∏–º–ø–æ—Ä—Ç, –æ—Å—Ç–∞–≤–∏–≤ —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ
from .start import back_to_main_menu
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—â–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
from .new_case_flow import create_progress_callback, handle_api_error

logger = logging.getLogger(__name__)

async def ocr_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        text="–ö–∞–∫–æ–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å?",
        reply_markup=ocr_document_type_keyboard()
    )
    return OcrFlow.CHOOSE_TYPE

async def ocr_choose_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    doc_type = query.data.replace("ocr_type_", "")
    context.user_data['ocr_doc_type'] = doc_type
    
    ocr_doc_name_map = {
        'passport': '–ø–∞—Å–ø–æ—Ä—Ç', 
        'snils': '–°–ù–ò–õ–°', 
        'work_book': '—Ç—Ä—É–¥–æ–≤—É—é –∫–Ω–∏–∂–∫—É',
        'other': '–¥—Ä—É–≥–æ–π –¥–æ–∫—É–º–µ–Ω—Ç'
    }
    doc_name = ocr_doc_name_map.get(doc_type, "–¥–æ–∫—É–º–µ–Ω—Ç")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ñ–∞–π–ª–æ–≤
    context.user_data['ocr_files'] = []

    await query.edit_message_text(
        text=f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ —Å–∫–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∞ ({doc_name}).\n"
             f"–ï—Å–ª–∏ —ç—Ç–æ –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç—Ä—É–¥–æ–≤–∞—è –∫–Ω–∏–∂–∫–∞), –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="ocr_done")]])
    )
    return OcrFlow.UPLOAD_FILE

async def ocr_upload_file(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–∏–µ–º —Ñ–∞–π–ª–∞(–æ–≤) –¥–ª—è OCR."""
    message = update.message
    if not (message.photo or message.document):
        await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ PDF-—Ñ–∞–π–ª.")
        return OcrFlow.UPLOAD_FILE

    if 'ocr_files' not in context.user_data:
        context.user_data['ocr_files'] = []

    file = await (message.photo[-1] if message.photo else message.document).get_file()
    file_bytes = await file.download_as_bytearray()
    
    filename = f"{file.file_unique_id}.jpg" if message.photo else file.file_path.split('/')[-1]
    
    context.user_data['ocr_files'].append({'bytes': file_bytes, 'filename': filename})

    doc_type = context.user_data.get('ocr_doc_type')
    # –°—á–∏—Ç–∞–µ–º, —á—Ç–æ 'other' –∏ 'work_book' —Ç–æ–∂–µ –º–æ–≥—É—Ç –±—ã—Ç—å –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–º–∏ –¥–ª—è –≥–∏–±–∫–æ—Å—Ç–∏
    is_multi_page = doc_type in ['work_book', 'other'] 

    if is_multi_page:
        await message.reply_text(
            '–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ".',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="ocr_done")]])
        )
        return OcrFlow.UPLOAD_FILE
    else:
        # –î–ª—è –æ–¥–Ω–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–ø–∞—Å–ø–æ—Ä—Ç, –°–ù–ò–õ–°) —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        return await ocr_process_files(update, context)

async def ocr_done_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ì–æ—Ç–æ–≤–æ'."""
    query = update.callback_query
    await query.answer()
    
    files = context.user_data.get('ocr_files', [])
    if not files:
        await query.edit_message_text('–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞. –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.')
        return await ocr_end(update, context)
        
    await query.edit_message_text(f'–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É {len(files)} —Ñ–∞–π–ª–∞(–æ–≤)...')
    return await ocr_process_files(update, context)

async def ocr_process_files(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á–∏ OCR –¥–ª—è –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤."""
    files = context.user_data.pop('ocr_files', [])
    doc_type = context.user_data.get('ocr_doc_type')
    chat = update.effective_chat

    if not files:
        # –≠—Ç–æ—Ç —Å–ª—É—á–∞–π –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ ocr_done_button, –Ω–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–≤–∏–º
        return await ocr_end(update, context)

    all_results = []
    has_errors = False

    for i, file_data in enumerate(files):
        filename = file_data['filename']
        progress_message = await chat.send_message(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {i+1}/{len(files)} ('{filename}')...")
        
        try:
            task_response = await api_client.submit_ocr_task(doc_type, file_data['bytes'], filename)
            status_response = await api_client.poll_task_status(
                f'/api/v1/document_extractions/{task_response["task_id"]}',
                create_progress_callback(progress_message)
            )
            
            if status_response['status'] == 'COMPLETED':
                data = status_response['data']
                all_results.append(data)
                result_text = format_ocr_result(data, doc_type)
                await progress_message.edit_text(result_text, parse_mode='Markdown')
            else:
                has_errors = True
                error_info = status_response.get('error', {'detail': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'})
                await progress_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {error_info.get('detail')}")
        
        except ApiClientError as e:
            has_errors = True
            await handle_api_error(e, progress_message)
        except TaskTimeoutError as e:
            has_errors = True
            logger.warning(f"–¢–∞–π–º–∞—É—Ç OCR –∑–∞–¥–∞—á–∏: {e}")
            await progress_message.edit_text("‚è≥ –°–µ—Ä–≤–µ—Ä —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as e:
            has_errors = True
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ OCR —Ñ–∞–π–ª–∞ '{filename}': {e}", exc_info=True)
            await progress_message.edit_text('üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.')

    # –ï—Å–ª–∏ –º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ª–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è
    if context.user_data.get('from_new_case'):
        if 'ocr_data' not in context.user_data:
            context.user_data['ocr_data'] = []
        context.user_data['ocr_data'].extend(all_results)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
        if not all_results and has_errors:
            await chat.send_message("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–∏–Ω –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ª–∞.")
        elif has_errors:
            await chat.send_message("–ß–∞—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏. –î–∞–Ω–Ω—ã–µ –∏–∑ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ª–∞.")
        else:
            await chat.send_message("–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ª–∞.")

        # –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        return_to_new_case_func = context.user_data.pop("return_to_new_case_func", None)
        if return_to_new_case_func:
            return await return_to_new_case_func(update, context)

    return await ocr_end(update, context)


def format_ocr_result(data: dict, doc_type: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç OCR –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Markdown."""
    if not data:
        return "*–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ.*"
    
    doc_name_map = {
        'passport': '–ø–∞—Å–ø–æ—Ä—Ç–∞', 
        'snils': '–°–ù–ò–õ–°', 
        'work_book': '—Ç—Ä—É–¥–æ–≤–æ–π –∫–Ω–∏–∂–∫–∏',
        'other': '–¥–æ–∫—É–º–µ–Ω—Ç–∞'
    }
    doc_name = doc_name_map.get(doc_type, "–¥–æ–∫—É–º–µ–Ω—Ç–∞")
    
    lines = [f"*–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ {doc_name}:*"]
    
    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
    def format_dict(d: dict, indent_level=0):
        indent = "  " * indent_level
        for key, value in d.items():
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –≤—ã–≤–æ–¥–∞
            if value is None or value == '' or value == []:
                continue

            key_str = key.replace('_', ' ').capitalize()
            if isinstance(value, dict):
                lines.append(f"{indent}*{key_str}:*")
                format_dict(value, indent_level + 1)
            elif isinstance(value, list):
                lines.append(f"{indent}*{key_str}:*")
                for i, item in enumerate(value):
                    if isinstance(item, dict):
                        lines.append(f"{indent}  - `–ó–∞–ø–∏—Å—å {i+1}`")
                        format_dict(item, indent_level + 2)
            else:
                lines.append(f"{indent}- *{key_str}:* `{value}`")

    format_dict(data)
            
    if len(lines) == 1:
        return "*–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã.*"
        
    return "\n".join(lines)


async def ocr_end(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥ OCR –∏ –æ—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ."""
    context.user_data.pop('ocr_doc_type', None)
    context.user_data.pop('ocr_files', None)
    context.user_data.pop('from_new_case', None)
    context.user_data.pop('ocr_data', None)
    
    # –ï—Å–ª–∏ –º—ã –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ª–∞, –ø–æ–∫–∞–∂–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Å—Ç–∞–ª—Å—è –≤ "–ø—É—Å—Ç–æ—Ç–µ"
    if not context.user_data.get('from_new_case'):
         await update.effective_chat.send_message(
            "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.",
            reply_markup=main_menu_keyboard()
        )

    return ConversationHandler.END

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel –≤–Ω—É—Ç—Ä–∏ –¥–∏–∞–ª–æ–≥–∞
async def ocr_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ OCR –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await update.message.reply_text(
        "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=main_menu_keyboard()
    )
    return await ocr_end(update, context)

ocr_conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(ocr_start, pattern="^ocr_document$")],
    states={
        OcrFlow.CHOOSE_TYPE: [CallbackQueryHandler(ocr_choose_type, pattern="^ocr_type_")],
        OcrFlow.UPLOAD_FILE: [
            MessageHandler(filters.PHOTO | filters.Document.PDF, ocr_upload_file),
            CallbackQueryHandler(ocr_done_button, pattern="^ocr_done$")
        ],
    },
    fallbacks=[CallbackQueryHandler(back_to_main_menu, pattern="^main_menu$"),
               CommandHandler("start", back_to_main_menu),
               CallbackQueryHandler(ocr_cancel, pattern="^cancel_ocr$")],
)