from aiogram.types import (
    KeyboardButton,
    ReplyKeyboardMarkup,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from datetime import datetime


def get_yes_no_keyboard() -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ '–î–∞' –∏ '–ù–µ—Ç'."""
    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(text="–î–∞"),
        KeyboardButton(text="–ù–µ—Ç"),
    )
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)


def get_data_input_method_keyboard() -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–æ—Å–æ–±–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö."""
    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é"),
        KeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã (OCR)"),
    )
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)


def get_main_menu_keyboard() -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –¥–µ–ª–æ"),
        KeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–µ–ª–∞"),
    )
    builder.row(KeyboardButton(text="–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"))
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, "–ú–æ–∏ –¥–µ–ª–∞" –∏–ª–∏ "–ü–æ–º–æ—â—å"
    # builder.row(KeyboardButton(text="–ü–æ–º–æ—â—å"))
    return builder.as_markup(resize_keyboard=True)


def get_pension_types_keyboard(
    pension_types: list[dict],
) -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –ø–µ–Ω—Å–∏–∏."""
    builder = InlineKeyboardBuilder()
    for p_type in pension_types:
        builder.row(
            InlineKeyboardButton(
                text=p_type["display_name"],
                callback_data=f"pension_type:{p_type['id']}",
            )
        )
    return builder.as_markup()


def get_skip_keyboard(text: str) -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —à–∞–≥–∞."""
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text=text, callback_data="skip"))
    return builder.as_markup()


def get_gender_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞."""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π", callback_data="gender:male"),
        InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender:female"),
    )
    return builder.as_markup()


def get_ocr_doc_type_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è OCR."""
    buttons = {
        "–ü–∞—Å–ø–æ—Ä—Ç": "passport",
        "–°–ù–ò–õ–°": "snils",
        "–¢—Ä—É–¥–æ–≤–∞—è –∫–Ω–∏–∂–∫–∞": "work_book",
        "–î—Ä—É–≥–æ–π –¥–æ–∫—É–º–µ–Ω—Ç": "other",
    }
    builder = InlineKeyboardBuilder()
    for text, callback_data in buttons.items():
        builder.row(
            InlineKeyboardButton(text=text, callback_data=f"ocr_type:{callback_data}")
        )
    return builder.as_markup()


def get_main_menu_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üÜï –ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –¥–µ–ª–æ", callback_data="new_case")
    )
    builder.row(
        InlineKeyboardButton(text="üóÇ –ú–æ—è –∏—Å—Ç–æ—Ä–∏—è –¥–µ–ª", callback_data="case_history")
    )
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π
    # builder.row(
    #     InlineKeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ RAG", callback_data="manage_rag")
    # )
    return builder.as_markup()


def get_document_upload_keyboard(
    required_docs: list, uploaded_docs: dict = None
) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
    –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏.
    """
    if uploaded_docs is None:
        uploaded_docs = {}
        
    builder = InlineKeyboardBuilder()
    
    for doc in required_docs:
        doc_type = doc.get("ocr_type")
        doc_name = doc.get("name")
        
        status_icon = ""
        if doc_info := uploaded_docs.get(doc_type):
            status = doc_info.get("status")
            if status == "PROCESSING":
                status_icon = " ‚è≥"
            elif status == "COMPLETED":
                status_icon = " ‚úÖ"
            elif status == "FAILED":
                status_icon = " ‚ùå"

        builder.row(
            InlineKeyboardButton(
                text=f"üì∏ {doc_name}{status_icon}",
                callback_data=f"upload_doc:{doc_type}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(
            text="üìé –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–π –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="upload_other_doc"
        )
    )
    
    # –ö–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ" –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    all_critical_done = True
    for doc in required_docs:
        if doc.get('is_critical'):
            doc_type = doc.get("ocr_type")
            if doc_type not in uploaded_docs or uploaded_docs[doc_type].get("status") != "COMPLETED":
                all_critical_done = False
                break
    
    if all_critical_done:
         builder.row(
            InlineKeyboardButton(
                text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="docs_upload_next_step"
            )
        )
    else:
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ –ª–æ–≥–∏–∫–æ–π
        builder.row(
             InlineKeyboardButton(
                text="‚úÖ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é", callback_data="skip_doc_upload"
            )
        )

    return builder.as_markup()


def get_verification_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üëç –î–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã", callback_data="ocr_data_correct"),
        InlineKeyboardButton(text="‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="ocr_data_edit"),
    )
    return builder.as_markup()


def get_case_history_keyboard(cases: list, limit: int, current_offset: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–µ–ª —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    builder = InlineKeyboardBuilder()

    for case in cases:
        case_id = case.get('id')
        case_date = case.get('created_at')
        status = case.get('final_status', 'N/A')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤–∏–¥–∞
        try:
            date_obj = datetime.fromisoformat(case_date)
            formatted_date = date_obj.strftime('%d.%m.%Y')
        except (ValueError, TypeError):
            formatted_date = case_date

        builder.row(
            InlineKeyboardButton(
                text=f"üîπ –î–µ–ª–æ #{case_id} –æ—Ç {formatted_date} - –°—Ç–∞—Ç—É—Å: {status}",
                callback_data=f"view_case:{case_id}"
            )
        )
        
    pagination_row = []
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if current_offset > 0:
        prev_offset = max(0, current_offset - limit)
        pagination_row.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥.", callback_data=f"history_page:{prev_offset}")
        )
        
    # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥" - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
    if len(cases) == limit:
        next_offset = current_offset + limit
        pagination_row.append(
            InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥.", callback_data=f"history_page:{next_offset}")
        )
        
    if pagination_row:
        builder.row(*pagination_row)

    return builder.as_markup()


def get_case_details_keyboard(case_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ–ª–∞."""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üìÑ –°–∫–∞—á–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ (PDF)", callback_data=f"download_doc:{case_id}_pdf"),
        InlineKeyboardButton(text="üìÑ –°–∫–∞—á–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ (DOCX)", callback_data=f"download_doc:{case_id}_docx")
    )
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    # builder.row(
    #     InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –¥–µ–ª–æ", callback_data=f"delete_case:{case_id}")
    # )
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏—Å—Ç–æ—Ä–∏–∏", callback_data="case_history")
    )
    return builder.as_markup()


def get_check_ocr_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ OCR."""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å", callback_data="check_ocr_results"
        )
    )
    return builder.as_markup()


def get_confirmation_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ª–∞."""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_creation"
        )
    )
    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation")
    )
    return builder.as_markup()
