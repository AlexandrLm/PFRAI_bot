import logging
from datetime import datetime
from aiogram import F, Router, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, PhotoSize
from io import BytesIO
import re
import asyncio

from app.api.client import api_client
from app.bot.keyboards import (
    get_pension_types_keyboard,
    get_yes_no_keyboard,
    get_confirmation_keyboard,
    get_data_input_method_keyboard,
    get_check_ocr_keyboard,
    get_skip_keyboard,
    get_gender_keyboard,
    get_document_upload_keyboard,
    get_verification_keyboard,
)
from app.bot.states import NewCase, CheckStatus
from app.bot.utils import split_long_message

router = Router()


# --- –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ª–∞ ---

@router.callback_query(F.data == "new_case")
async def handle_start_new_case(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –¥–µ–ª–æ' –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É API —Ç–∏–ø—ã –ø–µ–Ω—Å–∏–π –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    await callback.message.edit_text("–ó–∞–≥—Ä—É–∂–∞—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –ø–µ–Ω—Å–∏–π...")
    
    pension_types = await api_client.get_pension_types(user_id=callback.from_user.id)
    
    if pension_types:
        keyboard = get_pension_types_keyboard(pension_types)
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ–Ω—Å–∏–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø—Ä–µ—Ç–µ–Ω–¥—É–µ—Ç–µ:",
            reply_markup=keyboard
        )
        await state.set_state(NewCase.choosing_pension_type)
    else:
        await callback.message.edit_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∏–ø—ã –ø–µ–Ω—Å–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback.answer()
        await state.clear()


# –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ —Å –≤—ã–±–æ—Ä–æ–º –º–µ—Ç–æ–¥–∞ –≤–≤–æ–¥–∞ –ø–æ–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞ –ø–æ –Ω–æ–≤–æ–º—É –¢–ó
# @router.message(F.text == "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –¥–µ–ª–æ")
# async def handle_new_case(message: Message, state: FSMContext):
#     await message.answer(
#         "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–µ–ª–∞?",
#         reply_markup=get_data_input_method_keyboard(),
#     )
#     await state.set_state(NewCase.choosing_input_method)


# @router.message(NewCase.choosing_input_method, F.text.in_(["–ó–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é", "–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã (OCR)"]))
# async def handle_input_method_chosen(message: Message, state: FSMContext):
#     ... # (–∫–æ–¥ —Å—Ç–∞—Ä–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞)


# --- –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–µ–Ω—Å–∏–∏ (–æ–±—â–∏–π –¥–ª—è –æ–±–æ–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤) ---
async def ask_for_next_document(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ FSM."""
    data = await state.get_data()
    docs_to_upload = data.get("docs_to_upload", [])
    current_doc_index = data.get("current_doc_index", 0)

    if current_doc_index < len(docs_to_upload):
        doc = docs_to_upload[current_doc_index]
        await message.answer(
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç: <b>{doc['name']}</b>\n"
            f"<i>{doc['description']}</i>"
        )
        await state.set_state(NewCase.uploading_documents_cycle)
    else:
        # –í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        await message.answer(
            "–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–∏–Ω—è—Ç—ã. –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å.",
            reply_markup=get_check_ocr_keyboard()
        )
        await state.set_state(NewCase.checking_ocr_results)


@router.callback_query(NewCase.choosing_pension_type, F.data.startswith("pension_type:"))
async def handle_pension_type_chosen(
    callback: CallbackQuery, state: FSMContext
):
    pension_type_id = callback.data.split(":")[1]
    user_id = callback.from_user.id

    chosen_type_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"
    if callback.message.reply_markup:
        for row in callback.message.reply_markup.inline_keyboard:
            for button in row:
                if button.callback_data == callback.data:
                    chosen_type_name = button.text
                    break
            if chosen_type_name != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø":
                break
    
    await state.update_data(
        pension_type_id=pension_type_id,
        pension_type_name=chosen_type_name
    )

    await callback.message.edit_text(f"–í—ã–±—Ä–∞–Ω —Ç–∏–ø –ø–µ–Ω—Å–∏–∏: <b>{chosen_type_name}</b>")
    
    # –ü–æ –Ω–æ–≤–æ–º—É –¢–ó, –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–µ–Ω—Å–∏–∏ –º—ã —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–±–æ—Ä—É personal_data
    # –∏–ª–∏ –∫ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –õ–æ–≥–∏–∫—É OCR –ø–µ—Ä–µ–Ω–µ—Å–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥.
    
    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É **—Ñ–∞–º–∏–ª–∏—é**.")
    await state.set_state(NewCase.entering_last_name)
    await callback.answer()


# --- –¶–µ–ø–æ—á–∫–∞ —Å–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---

@router.message(NewCase.entering_last_name, F.text)
async def handle_last_name(message: Message, state: FSMContext):
    await state.update_data(last_name=message.text)
    await message.answer(f"–ü—Ä–∏–Ω—è—Ç–æ: {message.text}.\n\nüìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ **–∏–º—è**.")
    await state.set_state(NewCase.entering_first_name)


@router.message(NewCase.entering_first_name, F.text)
async def handle_first_name(message: Message, state: FSMContext):
    await state.update_data(first_name=message.text)
    await message.answer(
        f"–ü—Ä–∏–Ω—è—Ç–æ: {message.text}.\n\nüìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ **–æ—Ç—á–µ—Å—Ç–≤–æ**.",
        reply_markup=get_skip_keyboard("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"),
    )
    await state.set_state(NewCase.entering_middle_name)


@router.callback_query(NewCase.entering_middle_name, F.data == "skip")
async def handle_skip_middle_name(callback: CallbackQuery, state: FSMContext):
    await state.update_data(middle_name=None)
    await callback.message.edit_text("–û—Ç—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
    await callback.message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ **–î–î.–ú–ú.–ì–ì–ì–ì**.")
    await state.set_state(NewCase.entering_birth_date)
    await callback.answer()


@router.message(NewCase.entering_middle_name, F.text)
async def handle_middle_name(message: Message, state: FSMContext):
    await state.update_data(middle_name=message.text)
    await message.answer(f"–ü—Ä–∏–Ω—è—Ç–æ: {message.text}.")
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ **–î–î.–ú–ú.–ì–ì–ì–ì**.")
    await state.set_state(NewCase.entering_birth_date)


@router.message(NewCase.entering_birth_date, F.text)
async def handle_birth_date(message: Message, state: FSMContext):
    try:
        datetime.strptime(message.text, "%d.%m.%Y")
        await state.update_data(birth_date=message.text)
        await message.answer(f"–ü—Ä–∏–Ω—è—Ç–æ: {message.text}.\n\nüìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä **–°–ù–ò–õ–°** (11 —Ü–∏—Ñ—Ä, –º–æ–∂–Ω–æ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏ –¥–µ—Ñ–∏—Å–∞–º–∏).")
        await state.set_state(NewCase.entering_snils)
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
        )
        await state.set_state(NewCase.entering_birth_date)


@router.message(NewCase.entering_snils, F.text)
async def handle_snils(message: Message, state: FSMContext):
    snils = message.text.replace("-", "").replace(" ", "")
    if snils.isdigit() and len(snils) == 11:
        await state.update_data(snils=snils)
        await message.answer(
            f"–ü—Ä–∏–Ω—è—Ç–æ.\n\nüë´ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à **–ø–æ–ª**.",
            reply_markup=get_gender_keyboard(),
        )
        await state.set_state(NewCase.entering_gender)
    else:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –°–ù–ò–õ–°. –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 11 —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        await state.set_state(NewCase.entering_snils)


@router.callback_query(NewCase.entering_gender, F.data.startswith("gender:"))
async def handle_gender_callback(callback: CallbackQuery, state: FSMContext):
    gender = callback.data.split(":")[1]
    gender_text = "–ú—É–∂—Å–∫–æ–π" if gender == "male" else "–ñ–µ–Ω—Å–∫–∏–π"
    await state.update_data(gender=gender_text)
    await callback.message.edit_text(f"–í—ã–±—Ä–∞–Ω –ø–æ–ª: {gender_text}")
    await callback.message.answer(" –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ.")
    await state.set_state(NewCase.entering_citizenship)
    await callback.answer()


@router.message(NewCase.entering_citizenship, F.text)
async def handle_citizenship(message: Message, state: FSMContext):
    await state.update_data(citizenship=message.text)
    await message.answer(f"–ü—Ä–∏–Ω—è—Ç–æ: {message.text}.\n\nüë®‚Äçüë©‚Äçüëß‚Äçüë¶ –£–∫–∞–∂–∏—Ç–µ **–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∂–¥–∏–≤–µ–Ω—Ü–µ–≤** (—Ü–∏—Ñ—Ä–æ–π, 0 –µ—Å–ª–∏ –Ω–µ—Ç).")
    await state.set_state(NewCase.entering_dependents)


@router.message(NewCase.entering_dependents, F.text)
async def handle_dependents(message: Message, state: FSMContext):
    if message.text.isdigit():
        dependents = int(message.text)
        if dependents >= 0:
            await state.update_data(dependents=dependents)
            await message.answer(
                f"–ü—Ä–∏–Ω—è—Ç–æ: {dependents}.\n\n‚úÖ –°–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω."
            )
            
            # --- –ù–∞—á–∞–ª–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ---
            data = await state.get_data()
            pension_type_id = data.get("pension_type_id")
            user_id = message.from_user.id
            
            await message.answer("–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏. –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫...")
            
            required_docs = await api_client.get_required_documents(
                user_id=user_id, pension_type_id=pension_type_id
            )
            
            if not required_docs:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –ø–µ–Ω—Å–∏–∏. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥.")
                # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç, –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–≤–æ–¥–∫–µ
                await show_summary_and_ask_for_confirmation(message, state)
                return

            await state.update_data(
                required_docs=required_docs,
                uploaded_docs={}, # {doc_type: task_id/data}
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            docs_message_lines = ["–î–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –ø–µ–Ω—Å–∏–∏ —Ç—Ä–µ–±—É—é—Ç—Å—è:\n"]
            for doc in required_docs:
                status = "‚ùóÔ∏è" if doc.get('is_critical') else "üîπ"
                docs_message_lines.append(f"{status} {doc.get('name')}")
            
            await message.answer(
                "\n".join(docs_message_lines),
                reply_markup=get_document_upload_keyboard(required_docs)
            )
            await state.set_state(NewCase.managing_documents)

        else:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∂–¥–∏–≤–µ–Ω—Ü–µ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            await state.set_state(NewCase.entering_dependents)
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∂–¥–∏–≤–µ–Ω—Ü–µ–≤ —Ü–∏—Ñ—Ä–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0, 1, 2...):"
        )
        await state.set_state(NewCase.entering_dependents)


# --- –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞, –ø–æ–∫–∞ —É–±–∏—Ä–∞–µ–º) ---
# --- –ù–æ–≤—ã–π –±–ª–æ–∫: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ---

@router.callback_query(NewCase.managing_documents, F.data.startswith("upload_doc:"))
async def handle_upload_doc_button(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ ...'"""
    doc_type_to_upload = callback.data.split(":")[1]
    await state.update_data(current_upload_doc_type=doc_type_to_upload)
    
    await callback.message.answer(f"–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ —Å–∫–∞–Ω –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: <b>{doc_type_to_upload}</b>")
    await state.set_state(NewCase.uploading_document)
    await callback.answer()


@router.message(NewCase.uploading_document, F.photo)
async def handle_document_photo_upload(message: Message, state: FSMContext, bot: Bot):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ OCR –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞."""
    data = await state.get_data()
    doc_type = data.get("current_upload_doc_type")

    if not doc_type:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    progress_message = await message.answer(f"‚è≥ –ü–æ–ª—É—á–∏–ª —Ñ–æ—Ç–æ –¥–ª—è '{doc_type}'. –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã...")

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    photo: PhotoSize = message.photo[-1]
    image_bytes_io = BytesIO()
    await bot.download(file=photo.file_id, destination=image_bytes_io)
    image_bytes = image_bytes_io.getvalue()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ OCR
    result = await api_client.create_ocr_task(
        user_id=message.from_user.id,
        file_content=image_bytes,
        document_type=doc_type
    )

    if not result or "task_id" not in result:
        await progress_message.edit_text(f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{doc_type}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ —Ä–∞–∑.")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        await state.set_state(NewCase.managing_documents)
        return

    task_id = result["task_id"]
    await progress_message.edit_text(f"–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –¥–ª—è '{doc_type}' –∑–∞–ø—É—â–µ–Ω–æ. ID –∑–∞–¥–∞—á–∏: `{task_id}`. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –Ø –ø—Ä–æ–≤–µ—Ä—é –µ–≥–æ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞—Å–∫—É
    uploaded_docs = data.get("uploaded_docs", {})
    uploaded_docs[doc_type] = {"task_id": task_id, "status": "PROCESSING"}
    await state.update_data(uploaded_docs=uploaded_docs)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
    asyncio.create_task(poll_ocr_status(
        user_id=message.from_user.id,
        chat_id=message.chat.id,
        task_id=task_id,
        doc_type=doc_type,
        state=state,
        bot=bot
    ))

    # –°—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
    required_docs = data.get("required_docs", [])
    await message.answer(
        "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –¥–æ–∂–¥–∞—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏.",
        reply_markup=get_document_upload_keyboard(required_docs, uploaded_docs)
    )
    await state.set_state(NewCase.managing_documents)


async def poll_ocr_status(user_id: int, chat_id: int, task_id: str, doc_type: str, state: FSMContext, bot: Bot):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å OCR –∑–∞–¥–∞—á–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–ª–ª–∏–Ω–≥ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    for _ in range(10): # –ù–∞–ø—Ä–∏–º–µ—Ä, 10 –ø–æ–ø—ã—Ç–æ–∫ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 5 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(5) 
        
        result = await api_client.get_ocr_task_status(user_id=user_id, task_id=task_id)
        
        if result and result.get("status") == "COMPLETED":
            data_from_fsm = await state.get_data()
            uploaded_docs = data_from_fsm.get("uploaded_docs", {})
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            ocr_data = result.get("data", {})
            uploaded_docs[doc_type] = {"task_id": task_id, "status": "COMPLETED", "data": ocr_data}
            await state.update_data(uploaded_docs=uploaded_docs, last_ocr_result=ocr_data)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            verification_message = "‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
            for key, value in ocr_data.items():
                verification_message += f"<b>{FIELD_MAP.get(key, key)}:</b> {value}\n"
            
            await bot.send_message(
                chat_id,
                verification_message,
                reply_markup=get_verification_keyboard()
            )
            await state.set_state(NewCase.verifying_document_data)
            return # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –∏ –∑–∞–¥–∞—á–∏

        elif result and result.get("status") == "FAILED":
            data_from_fsm = await state.get_data()
            uploaded_docs = data_from_fsm.get("uploaded_docs", {})
            uploaded_docs[doc_type]["status"] = "FAILED"
            await state.update_data(uploaded_docs=uploaded_docs)
            
            error_detail = result.get("error", {}).get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            await bot.send_message(chat_id, f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{doc_type}'. –û—à–∏–±–∫–∞: {error_detail}")
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
            required_docs = data_from_fsm.get("required_docs", [])
            await bot.send_message(chat_id, "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –¥–æ–∫—É–º–µ–Ω—Ç.", reply_markup=get_document_upload_keyboard(required_docs, uploaded_docs))
            return

    # –ï—Å–ª–∏ –≤—ã—à–ª–∏ –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É
    await bot.send_message(chat_id, f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{doc_type}' –∑–∞—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è. –Ø —Å–æ–æ–±—â—É, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å.")


@router.callback_query(NewCase.verifying_document_data, F.data == "ocr_data_correct")
async def handle_ocr_data_correct(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö OCR."""
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –°–æ—Ö—Ä–∞–Ω—è—é —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
    
    data = await state.get_data()
    last_ocr_result = data.get("last_ocr_result", {})
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –≤ FSM –∏–∑ –¥–∞–Ω–Ω—ã—Ö OCR
    update_data = {}
    for key, value in last_ocr_result.items():
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —É–º–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥, –µ—Å–ª–∏ –ø–æ–ª—è –≤ OCR –∏ FSM –Ω–∞–∑—ã–≤–∞—é—Ç—Å—è –ø–æ-—Ä–∞–∑–Ω–æ–º—É
        if key in ["last_name", "first_name", "middle_name", "birth_date", "snils_number"]:
            # –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            if key == "snils_number":
                update_data["snils"] = value
            else:
                update_data[key] = value

    await state.update_data(**update_data)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
    required_docs = data.get("required_docs", [])
    uploaded_docs = data.get("uploaded_docs", {})
    await callback.message.answer(
        "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç.",
        reply_markup=get_document_upload_keyboard(required_docs, uploaded_docs)
    )
    await state.set_state(NewCase.managing_documents)
    await callback.answer()


@router.callback_query(NewCase.verifying_document_data, F.data == "ocr_data_edit")
async def handle_ocr_data_edit(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö OCR."""
    await callback.message.edit_text("–§—É–Ω–∫—Ü–∏—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
    data = await state.get_data()
    required_docs = data.get("required_docs", [])
    uploaded_docs = data.get("uploaded_docs", {})
    await callback.message.answer(
        "–ü–æ–∫–∞ —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –¥—Ä—É–≥–∏–º–∏.",
        reply_markup=get_document_upload_keyboard(required_docs, uploaded_docs)
    )
    await state.set_state(NewCase.managing_documents)
    await callback.answer()


@router.callback_query(NewCase.managing_documents, F.data == "docs_upload_next_step")
async def handle_docs_upload_next_step(callback: CallbackQuery, state: FSMContext):
    """
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π.
    """
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ, –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –º–µ—Å—Ç–µ. –ì–æ—Ç–æ–≤–ª—é –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É...")
    await show_summary_and_ask_for_confirmation(callback.message, state)
    await callback.answer()


@router.callback_query(NewCase.managing_documents, F.data == "skip_doc_upload")
async def handle_skip_doc_upload(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–ø—É—Å–∫ —à–∞–≥–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
    """
    await callback.message.edit_text("–í—ã —Ä–µ—à–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –≤–≤–µ—Å—Ç–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é.")
    # –¢—É—Ç –Ω–∞–º –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –æ–±—ã—á–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∏–∑ OCR.
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å—Ü–µ–Ω–∞—Ä–∏—è, –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏—Ç–æ–≥–æ–≤–æ–π —Å–≤–æ–¥–∫–µ.
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ü–µ–ø–æ—á–∫–∞ FSM –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞–∂–µ –∏ —Ç.–¥.
    await show_summary_and_ask_for_confirmation(callback.message, state)
    await callback.answer()


# –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∏ —Ç.–¥. –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞
# –Ω–∞ –ª–æ–≥–∏–∫—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ OCR –∏ –∏—Ç–æ–≥–æ–≤–æ–π —Å–≤–æ–¥–∫–∏ –ø–æ—Å–ª–µ —ç—Ç–∞–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.

# --- –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ ---

async def show_summary_and_ask_for_confirmation(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."""
    data = await state.get_data()
    
    summary_parts = [f"<b>–¢–∏–ø –ø–µ–Ω—Å–∏–∏:</b> {data.get('pension_type_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}"]
    
    summary_parts.append("\n<b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>")
    summary_parts.append(f"  –§–ò–û: {data.get('last_name', '')} {data.get('first_name', '')} {data.get('middle_name', '–ù–µ—Ç')}")
    summary_parts.append(f"  –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data.get('birth_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
    summary_parts.append(f"  –°–ù–ò–õ–°: {data.get('snils', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
    summary_parts.append(f"  –ü–æ–ª: {data.get('gender', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
    summary_parts.append(f"  –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: {data.get('citizenship', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
    summary_parts.append(f"  –ò–∂–¥–∏–≤–µ–Ω—Ü—ã: {data.get('dependents', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")

    if data.get('disability_group'):
        summary_parts.append("\n<b>–ò–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å:</b>")
        summary_parts.append(f"  –ì—Ä—É–ø–ø–∞: {data.get('disability_group')}")
        summary_parts.append(f"  –î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {data.get('disability_date')}")
        summary_parts.append(f"  –ù–æ–º–µ—Ä —Å–ø—Ä–∞–≤–∫–∏: {data.get('disability_cert_number', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}")
        
    if data.get('work_experience_total_years') is not None:
        summary_parts.append("\n<b>–¢—Ä—É–¥–æ–≤–æ–π —Å—Ç–∞–∂:</b>")
        summary_parts.append(f"  –û–±—â–∏–π —Å—Ç–∞–∂: {data.get('work_experience_total_years')} –ª–µ—Ç")

    if data.get('pension_points') is not None:
        summary_parts.append(f"\n<b>–ü–µ–Ω—Å–∏–æ–Ω–Ω—ã–µ –±–∞–ª–ª—ã (–ò–ü–ö):</b> {data.get('pension_points')}")
        
    summary_text = "\n".join(summary_parts)
    
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n" + summary_text,
        reply_markup=get_confirmation_keyboard()
    )
    await state.set_state(NewCase.confirming_case_creation)


@router.callback_query(NewCase.confirming_case_creation, F.data == "cancel_creation")
async def handle_cancel_creation(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()


@router.callback_query(NewCase.confirming_case_creation, F.data == "confirm_creation")
async def handle_confirm_creation(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–û—Ç–ø—Ä–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
    
    data = await state.get_data()
    user_id = callback.from_user.id
    
    personal_data = {
        "last_name": data.get("last_name"),
        "first_name": data.get("first_name"),
        "middle_name": data.get("middle_name"),
        "birth_date": data.get("birth_date"),
        "snils": data.get("snils"),
        "gender": data.get("gender"),
        "citizenship": data.get("citizenship"),
        "dependents": data.get("dependents"),
    }
    
    case_payload = {
        "personal_data": personal_data,
        "pension_type": data.get("pension_type_id"),
    }
    
    if data.get("disability_group"):
        case_payload["disability"] = {
            "group": data.get("disability_group"),
            "date": data.get("disability_date"),
            "cert_number": data.get("disability_cert_number"),
        }

    if data.get("work_experience_total_years") is not None:
        case_payload["work_experience"] = {
            "total_years": data.get("work_experience_total_years"),
        }
        
    if data.get("pension_points") is not None:
        case_payload["pension_points"] = data.get("pension_points")

    result = await api_client.create_case(user_id=user_id, case_data=case_payload)
    
    if result and result.get("case_id"):
        await callback.message.answer(
            f"‚úÖ –î–µ–ª–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ! –ï–≥–æ –Ω–æ–º–µ—Ä: <b>{result['case_id']}</b>\n"
            f"–°—Ç–∞—Ç—É—Å: {result.get('final_status', 'N/A')}\n"
            f"–ü–æ—è—Å–Ω–µ–Ω–∏–µ: {result.get('explanation', '–ù–µ—Ç')}"
        )
    else:
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        
    await state.clear()


# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ ---

@router.message(F.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–µ–ª–∞")
async def handle_check_status_start(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –≤–∞—à–µ–≥–æ –¥–µ–ª–∞ –∏–ª–∏ ID –∑–∞–¥–∞—á–∏ OCR:")
    await state.set_state(CheckStatus.entering_id)


FIELD_MAP = {
    "last_name": "–§–∞–º–∏–ª–∏—è",
    "first_name": "–ò–º—è",
    "middle_name": "–û—Ç—á–µ—Å—Ç–≤–æ",
    "birth_date": "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è",
    "sex": "–ü–æ–ª",
    "gender": "–ü–æ–ª",
    "birth_place": "–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è",
    "passport_series": "–°–µ—Ä–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞",
    "passport_number": "–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞",
    "issue_date": "–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏",
    "issuing_authority": "–ö–µ–º –≤—ã–¥–∞–Ω",
    "department_code": "–ö–æ–¥ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è",
    "snils_number": "–ù–æ–º–µ—Ä –°–ù–ò–õ–°",
    "calculated_total_years": "–û–±—â–∏–π —Å—Ç–∞–∂ (—Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ)",
    "records": "–ó–∞–ø–∏—Å–∏ –æ —Ç—Ä—É–¥–æ–≤–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
    "date_in": "–î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞",
    "date_out": "–î–∞—Ç–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è",
    "organization": "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è",
    "position": "–î–æ–ª–∂–Ω–æ—Å—Ç—å",
    "identified_document_type": "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞",
    "standardized_document_type": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞",
    "extracted_fields": "–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–æ–ª—è",
    "multimodal_assessment": "–û—Ü–µ–Ω–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (LLM)",
    "text_llm_reasoning": "–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (LLM)",
}


def format_ocr_result(result: dict) -> str:
    """–ö—Ä–∞—Å–∏–≤–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç OCR –∑–∞–¥–∞—á–∏."""
    status = result.get("status", "–ù–ï–ò–ó–í–ï–°–¢–ù–û")
    task_id = result.get("task_id", "")
    
    lines = [f"<b>–ó–∞–¥–∞—á–∞ OCR:</b> <code>{task_id}</code>"]
    lines.append(f"<b>–°—Ç–∞—Ç—É—Å:</b> {status}")
    
    if status == "COMPLETED" and result.get("data"):
        lines.append("\n<b>–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>")
        data = result["data"]
        for key, value in data.items():
            if not value:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                continue
            
            display_name = FIELD_MAP.get(key, key)
            
            if isinstance(value, list) and key == "records":
                lines.append(f"  <b>{display_name}:</b>")
                for item in value:
                    record_line = ", ".join(
                        f"{FIELD_MAP.get(k, k)}: {v}" for k, v in item.items() if v
                    )
                    lines.append(f"    - {record_line}")
            elif isinstance(value, dict):
                lines.append(f"  <b>{display_name}:</b>")
                for sub_key, sub_value in value.items():
                    lines.append(f"    - {sub_key}: {sub_value}")
            else:
                lines.append(f"  <b>{display_name}:</b> {value}")
            
    elif status == "FAILED" and result.get("error"):
        lines.append(f"<b>–û—à–∏–±–∫–∞:</b> {result['error'].get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
    return "\n".join(lines)

def format_rag_explanation(text: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç RAG –≤ HTML –¥–ª—è Telegram, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è —Ä–∞–∑–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã.
    """
    if not text:
        return "–ù–µ—Ç"

    # 1. –ó–∞–º–µ–Ω–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
    text = text.replace('---', '\n')

    lines = text.split('\n')
    processed_lines = []

    for line in lines:
        stripped_line = line.lstrip()
        indent_space = ' ' * (len(line) - len(stripped_line))

        # 2. –£–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ ###
        if stripped_line.startswith('###'):
            processed_line = indent_space + stripped_line.replace('###', '').lstrip()
            processed_lines.append(processed_line)
            continue
            
        # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–æ–≤ " - " –∏–ª–∏ "* "
        if stripped_line.startswith('- ') or stripped_line.startswith('* '):
            # –ó–∞–º–µ–Ω—è–µ–º –¥–µ—Ñ–∏—Å/–∑–≤–µ–∑–¥–æ—á–∫—É –Ω–∞ "‚Ä¢" –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Å—Ç—É–ø
            processed_line = indent_space + '‚Ä¢ ' + stripped_line[2:]
            processed_lines.append(processed_line)
            continue
            
        # 4. –î–ª—è —Å—Ç—Ä–æ–∫, –Ω–µ —Ç—Ä–µ–±—É—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processed_lines.append(line)

    final_text = '\n'.join(processed_lines)
    
    # 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ **text** –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    final_text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', final_text)

    return final_text


@router.message(CheckStatus.entering_id, F.text)
async def handle_id_for_status_check(message: Message, state: FSMContext, bot: Bot):
    entity_id = message.text
    user_id = message.from_user.id
    await message.answer(f"–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ ID: <code>{entity_id}</code>...")

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ ID –ª–∏ —ç—Ç–æ OCR –∑–∞–¥–∞—á–∏
    ocr_result = await api_client.get_ocr_task_status(user_id=user_id, task_id=entity_id)
    if ocr_result and ocr_result.get("error") != "not_found":
        formatted_text = format_ocr_result(ocr_result)
        await message.answer(formatted_text)
        await state.clear()
        return

    # 2. –ï—Å–ª–∏ –Ω–µ OCR, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ ID –ª–∏ —ç—Ç–æ –¥–µ–ª–∞
    if entity_id.isdigit():
        case_result = await api_client.get_case_status(user_id=user_id, case_id=int(entity_id))
        if case_result and case_result.get("error") != "not_found":
            
            status_text = f"–°—Ç–∞—Ç—É—Å –¥–µ–ª–∞: {case_result.get('final_status')}"
            explanation = case_result.get('final_explanation')

            if explanation and explanation.lower() != '–Ω–µ—Ç':
                formatted_explanation = format_rag_explanation(explanation)
                status_text += f"\n–ü–æ—è—Å–Ω–µ–Ω–∏–µ:\n{formatted_explanation}"
            
            # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            message_parts = split_long_message(status_text)
            for part in message_parts:
                await message.answer(part)

            await state.clear()
            return

    # 3. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–µ–ª–æ –∏–ª–∏ OCR –∑–∞–¥–∞—á—É —Å ID: {entity_id}")
    await state.clear() 

# –£—Å—Ç–∞—Ä–µ–≤—à–∞—è –ª–æ–≥–∏–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É
# @router.callback_query(NewCase.checking_ocr_results, F.data == "check_ocr_results")
# async def handle_check_ocr_results(callback: CallbackQuery, state: FSMContext):
#     await callback.message.edit_text("–ü—Ä–æ–≤–µ—Ä—è—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
#     
#     data = await state.get_data()
#     ocr_tasks_ids = data.get("ocr_tasks", [])
#     user_id = callback.from_user.id
#     
#     final_data = {}
#     all_completed = True
#     
#     for task_id in ocr_tasks_ids:
#         status_result = await api_client.get_ocr_task_status(user_id=user_id, task_id=task_id)
#         if not status_result:
#             await callback.message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ {task_id}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.")
#             all_completed = False
#             break
#         
#         if status_result.get("status") == "PROCESSING":
#             await callback.message.answer("‚è≥ –î–æ–∫—É–º–µ–Ω—Ç—ã –µ—â–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#             all_completed = False
#             break
#             
#         if status_result.get("status") == "FAILED":
#             error_msg = status_result.get("error", {}).get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
#             await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–¥–Ω–æ–≥–æ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {error_msg}\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∏–¥–µ—Ç—Å—è –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
#             await state.clear()
#             return
#             
#         if status_result.get("status") == "COMPLETED":
#             if isinstance(status_result.get("data"), dict):
#                 final_data.update(status_result["data"])
# 
#     if not all_completed:
#         await callback.message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.", reply_markup=get_check_ocr_keyboard())
#         await callback.answer()
#         return
# 
#     ocr_bday = final_data.get("birth_date") # YYYY-MM-DD
#     if ocr_bday:
#         try:
#             dt_bday = datetime.strptime(ocr_bday, "%Y-%m-%d")
#             final_data["birth_date"] = dt_bday.strftime("%d.%m.%Y")
#         except (ValueError, TypeError):
#             final_data["birth_date"] = None 
#             
#     await state.update_data(
#         last_name=final_data.get("last_name"),
#         first_name=final_data.get("first_name"),
#         middle_name=final_data.get("middle_name"),
#         birth_date=final_data.get("birth_date"),
#         snils=final_data.get("snils_number"),
#         gender=final_data.get("sex") or final_data.get("gender"),
#         work_experience_total_years=final_data.get("calculated_total_years"),
#     )
# 
#     await callback.message.answer("‚úÖ –í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
#     await show_summary_and_ask_for_confirmation(callback.message, state) 